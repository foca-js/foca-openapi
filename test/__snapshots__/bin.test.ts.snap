// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`生成runtime并重新打包 1`] = `
"import { BaseOpenapiClient } from './base-openapi-client';

export namespace OpenapiClient {
  export interface ListUsersQuery {
    page?: number;

    /**
     * 每页返回的资源数量
     */
    limit?: number;
  }
  export interface ListUsersResponse {
    page: number;
    limit: number;
    total: number;
    result: {
      id: number;
      name: string;
      age: number;
      address?: string;
      password: string;
    }[];
  }
  export interface RetrieveUsersByIdParams {
    id: number;
  }
  export interface RetrieveUsersByIdResponse {
    id: number;
    name: string;
    age: number;
    address?: string;
    password: string;
  }
  export interface CreateUsersBody {
    name: string;
    age?: number;
    address?: number;
  }
  export interface CreateUsersResponse {
    id: number;
    name: string;
    age: number;
    address?: string;
    password: string;
  }
  export interface CreateUsersV1Body {
    name: string;
    age?: number;
    address?: number;
  }
  export interface CreateUsersV1Response {
    id: number;
    name: string;
    age: number;
    address?: string;
    password: string;
  }
  export interface ReplaceUsersByIdParams {
    id: number;
  }
  export interface ReplaceUsersByIdBody {
    name: string;
    age?: number;
    address?: number;
  }
  export interface ReplaceUsersByIdResponse {
    id: number;
    name: string;
    age: number;
    address?: string;
    password: string;
  }
  export interface ReplaceUsersAvatarBody {
    file: Blob;
  }
  export interface ReplaceUsersAvatarResponse {
    url: string;
  }
  export interface DeleteUsersByIdParams {
    id: number;
  }
}

export class OpenapiClient extends BaseOpenapiClient {
  get<K extends keyof OpenapiClient_get_paths>(
    uri: K,
    ...rest: K extends '/users'
      ? [opts?: OpenapiClient_get_paths[K]['request']]
      : [opts: OpenapiClient_get_paths[K]['request']]
  ): Promise<OpenapiClient_get_paths[K]['response']> {
    return this.request(uri, 'get', rest[0] || {});
  }
  post<K extends keyof OpenapiClient_post_paths>(
    uri: K,
    ...rest: [opts: OpenapiClient_post_paths[K]['request']]
  ): Promise<OpenapiClient_post_paths[K]['response']> {
    return this.request(uri, 'post', rest[0] || {});
  }
  put<K extends keyof OpenapiClient_put_paths>(
    uri: K,
    ...rest: [opts: OpenapiClient_put_paths[K]['request']]
  ): Promise<OpenapiClient_put_paths[K]['response']> {
    return this.request(uri, 'put', rest[0] || {});
  }

  delete<K extends keyof OpenapiClient_delete_paths>(
    uri: K,
    ...rest: [opts: OpenapiClient_delete_paths[K]['request']]
  ): Promise<OpenapiClient_delete_paths[K]['response']> {
    return this.request(uri, 'delete', rest[0] || {});
  }

  protected override getContentTypes(uri: string, method: string) {
    return defaultContentTypes[uri + ' ' + method] || [void 0, void 0];
  }
}

const defaultContentTypes: Record<
  string,
  [
    BaseOpenapiClient.UserInputOpts['requestBodyType'],
    BaseOpenapiClient.UserInputOpts['responseType'],
  ]
> = {
  'put /users/avatar': ['multipart/form-data', void 0],
};

interface OpenapiClient_get_paths {
  '/users': BaseOpenapiClient.Prettify<{
    request: {
      query?: OpenapiClient.ListUsersQuery;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.ListUsersResponse;
  }>;
  '/users/{id}': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;
      params: OpenapiClient.RetrieveUsersByIdParams;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.RetrieveUsersByIdResponse;
  }>;
}
interface OpenapiClient_post_paths {
  '/users': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;

      body: OpenapiClient.CreateUsersBody;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.CreateUsersResponse;
  }>;
  '/users/v1': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;

      body: OpenapiClient.CreateUsersV1Body;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.CreateUsersV1Response;
  }>;
}
interface OpenapiClient_put_paths {
  '/users/{id}': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;
      params: OpenapiClient.ReplaceUsersByIdParams;
      body: OpenapiClient.ReplaceUsersByIdBody;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.ReplaceUsersByIdResponse;
  }>;
  '/users/avatar': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;

      body: OpenapiClient.ReplaceUsersAvatarBody;
    } & BaseOpenapiClient.UserInputOpts;
    response: OpenapiClient.ReplaceUsersAvatarResponse;
  }>;
}
interface OpenapiClient_delete_paths {
  '/users/{id}': BaseOpenapiClient.Prettify<{
    request: {
      query?: object;
      params: OpenapiClient.DeleteUsersByIdParams;
    } & BaseOpenapiClient.UserInputOpts;
    response: unknown;
  }>;
}
"
`;
